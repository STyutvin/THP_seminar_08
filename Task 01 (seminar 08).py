#!/usr/bin/env python
# coding: utf-8

# In[2]:


# Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
# zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy
# Полученные значения должны быть равны.
# Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков,
# а затем с использованием функций из библиотек numpy и pandas.


# In[1]:


import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110]),
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])


# In[6]:


# Найдем коварицию по формуле
cov=np.mean(zp*ks)-np.mean(zp)*np.mean(ks)
cov
#cov=9157.839999999997


# In[17]:


# Для смещенной ковариции получаем
np.cov(zp,ks, ddof=0)
# array([[ 3494.64,  9157.84],
#       [ 9157.84, 30468.89]])
# расчет вручную cov=9157.839999999997, по встроенной функции 9157.84
# результаты идентичны


# In[10]:


# Найдем коэффициент корреляции Пирсона
np.corrcoef(zp,ks)
# array([[1.        , 0.88749009],
#       [0.88749009, 1.        ]])


# In[21]:


# Найдем коэффициент корреляции Пирсона вручную для смещенной ковариации
np.std(zp,ddof=0)


# In[22]:


np.std(ks,ddof=0)


# In[23]:


9157.84/(59.115480206118605*174.55340157098058)
# 0.8874900920739162, что равно результату,полученному с помощью функции corrcoef

